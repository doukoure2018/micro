services:
  # Database Services
  postgresdb:
    container_name: postgrecontainer
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SERVICE_TAGS: dev1
      SERVICE_NAME: postgresservice
    expose:
      - 5432
    ports:
      - 5432:5432
    volumes:
      - postgresvolume:/var/lib/postgresql/data
      - ./micro-digiservices/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - spring
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Database Migration Service
  flyway-migrations:
    image: flyway/flyway:11.3.0
    container_name: flyway-migrations
    environment:
      - FLYWAY_URL=jdbc:postgresql://postgresdb:5432/${POSTGRES_DB}
      - FLYWAY_USER=${POSTGRES_USER}
      - FLYWAY_PASSWORD=${POSTGRES_PASSWORD}
      - FLYWAY_SCHEMAS=public
      - FLYWAY_TABLE=flyway_schema_history
      - FLYWAY_BASELINE_ON_MIGRATE=true
      - FLYWAY_VALIDATE_ON_MIGRATE=true
      - FLYWAY_OUT_OF_ORDER=false
      - FLYWAY_CLEAN_DISABLED=true
      - FLYWAY_BASELINE_VERSION=7
    volumes:
      - ./micro-digiservices/database-migrations/src/main/resources/db/migration:/flyway/sql
    command: migrate
    networks:
      - spring
    depends_on:
      postgresdb:
        condition: service_healthy
    restart: "no"  # Run once and exit
    profiles:
      - migration
      - full

  pgadmin:
    container_name: pgadmincontainer
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_DEFAULT_ADDRESS: 6000
      PGADMIN_LISTEN_PORT: 6000
    depends_on:
      - postgresdb
    expose:
      - 6000
    ports:
      - 7000:6000
    volumes:
      - pgadminvolume:/var/lib/pgadmin
    networks:
      - spring

  # Messaging Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

  kafka:
      image: confluentinc/cp-kafka:7.4.0
      container_name: kafka
      ports:
        - 9092:9092
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      depends_on:
        - zookeeper
      networks:
        - spring

   # Discovery and Gateway Services
  discoveryserver:
    image: doukoure93/discoveryserver:latest
    container_name: discoveryserver
    ports:
      - "5002:5002"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      # Database connection override
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresdb:5432/localdb
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./logs/discoveryserver:/var/log/discoveryserver
    networks:
      - spring
    depends_on:
      postgresdb:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://admin:admin2711@localhost:5002/eureka/apps || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  gateway:
    image: doukoure93/gateway:latest
    container_name: gateway
    ports:
      - "8000:8000"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
    volumes:
      - ./logs/gateway:/var/log/gateway
    networks:
      - spring
    depends_on:
      - discoveryserver
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Business Services
  authorizationserver:
    image: doukoure93/authorizationserver:latest
    container_name: authorizationserver
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      # Database connection override
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresdb:5432/localdb
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      # Application URLs
      - UI_APP_URL=${UI_APP_URL}
      - BACKEND_APP_URL=${BACKEND_APP_URL}
      # OAuth2 configuration
      - OAUTH2_CLIENT_ID=${OAUTH2_CLIENT_ID:-client}
      - OAUTH2_SCOPE=${OAUTH2_SCOPE:-openid}
      - OAUTH2_RESPONSE_TYPE=${OAUTH2_RESPONSE_TYPE:-code}
      - OAUTH2_CODE_CHALLENGE_METHOD=${OAUTH2_CODE_CHALLENGE_METHOD:-S256}
      # Security settings
      - SERVER_SERVLET_SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-false}
      - SERVER_SERVLET_SESSION_COOKIE_HTTP_ONLY=true
      - SERVER_SERVLET_SESSION_COOKIE_SAME_SITE=strict
      # Disable Hibernate caching
      - SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE=false
      - SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_QUERY_CACHE=false
      - SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_REGION_FACTORY_CLASS=org.hibernate.cache.internal.NoCachingRegionFactory
    volumes:
      - ./keys:/app/keys
      - ./logs/authorizationserver:/var/log/authorizationserver
    networks:
      - spring
    depends_on:
      postgresdb:
        condition: service_healthy
      discoveryserver:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  userservice:
    image: doukoure93/userservice:latest
    container_name: userservice
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      # Database connection override
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresdb:5432/localdb
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      # Application URLs
      - UI_APP_URL=${UI_APP_URL}
      - BACKEND_APP_URL=${BACKEND_APP_URL}
      # Disable Hibernate caching
      - SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE=false
      - SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_QUERY_CACHE=false
      - SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_REGION_FACTORY_CLASS=org.hibernate.cache.internal.NoCachingRegionFactory
    volumes:
      - ./keys:/app/keys
      - ./logs/userservice:/var/log/userservice
    networks:
      - spring
    depends_on:
      postgresdb:
        condition: service_healthy
      kafka:
        condition: service_started
      discoveryserver:
        condition: service_healthy
      authorizationserver:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  ecreditservice:
    image: doukoure93/ecreditservice:latest
    container_name: ecreditservice
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      # Database connection override
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresdb:5432/localdb
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      # Application URLs
      - UI_APP_URL=${UI_APP_URL}
      - BACKEND_APP_URL=${BACKEND_APP_URL}
     # Disable Hibernate caching
      - SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE=false
      - SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_QUERY_CACHE=false
      - SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_REGION_FACTORY_CLASS=org.hibernate.cache.internal.NoCachingRegionFactory
    volumes:
      - ./keys:/app/keys
      - ./logs/ecreditservice:/var/log/ecreditservice
    networks:
      - spring
    depends_on:
      postgresdb:
        condition: service_healthy
      discoveryserver:
        condition: service_healthy
      authorizationserver:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8087/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  ebankingservice:
    image: doukoure93/ebanking:latest
    container_name: ebankingservice
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      # SQL Server connection (different from other services)
      - SPRING_DATASOURCE_URL=jdbc:sqlserver://10.110.15.2;databaseName=BDCRG;trustServerCertificate=true;encrypt=true
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=1234567
      # Application URLs
      - UI_APP_URL=${UI_APP_URL}
      - BACKEND_APP_URL=${BACKEND_APP_URL}
      # Eureka configuration
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://admin:admin2711@discoveryserver:5002/eureka/
      # JWKS URI
      - JWKS_URI=http://authorizationserver:8080/oauth2/jwks
      # Disable Hibernate caching
      - SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE=false
      - SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_QUERY_CACHE=false
      - SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_REGION_FACTORY_CLASS=org.hibernate.cache.internal.NoCachingRegionFactory
    volumes:
      - ./keys:/app/keys
      - ./logs/ebankingservice:/var/log/ebankingservice
    networks:
      - spring
    depends_on:
      discoveryserver:
        condition: service_healthy
      authorizationserver:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  notificationservice:
    image: doukoure93/notificationservice:latest
    container_name: notificationservice
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      # Database connection override
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresdb:5432/localdb
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      # Email configuration
      - SPRING_MAIL_HOST=${MAIL_HOST}
      - SPRING_MAIL_PORT=${MAIL_PORT}
      - SPRING_MAIL_USERNAME=${MAIL_USERNAME}
      - SPRING_MAIL_PASSWORD=${MAIL_PASSWORD}
      # Application URLs
      - UI_APP_URL=${UI_APP_URL}
      - BACKEND_APP_URL=${BACKEND_APP_URL}
    volumes:
      - ./keys:/app/keys
      - ./logs/notificationservice:/var/log/notificationservice
    networks:
      - spring
    depends_on:
      kafka:
        condition: service_started
      discoveryserver:
        condition: service_started
      authorizationserver:
        condition: service_started
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8086/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Application
  digicrg-app:
    container_name: digicrg-app
    image: doukoure93/digicrg-app
    ports:
      - "4200:4200"
    environment:
      - API_BASE_URL=${API_BASE_URL}
      - AUTH_SERVER_URL=${AUTH_SERVER_URL}
    depends_on:
      ecreditservice:
        condition: service_started
      authorizationserver:
        condition: service_started
      notificationservice:
        condition: service_started
      userservice:
        condition: service_started
      ebankingservice:
        condition: service_started
      gateway:
        condition: service_started
    networks:
      - spring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgresvolume:
  pgadminvolume:

networks:
  spring:
    driver: bridge