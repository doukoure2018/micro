name: CD - Deploy Microservices to OVH

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - micro-digiservices/**
      - docker-compose.yml
      - .env.prod
      - '!micro-digiservices/frontend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_USER: user2711
          POSTGRES_PASSWORD: admin2711
          POSTGRES_DATABASE: localdb
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Notify deployment start
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":":rocket: Microservices deployment to OVH started\nCommit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}\nMessage: ${{ github.event.head_commit.message }}"}'
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Generate build tag
        id: build-number
        run: echo "BUILD_NUMBER=$(date '+%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      # Build and push each microservice with Maven/Jib
      - name: Install all modules (including clients)
        working-directory: ./micro-digiservices
        run: mvn -ntp -B install -DskipTests

      - name: Build and push Discovery Server
        working-directory: ./micro-digiservices/discoveryserver
        run: |
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=${{ steps.build-number.outputs.BUILD_NUMBER }} jib:build
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=latest jib:build

      - name: Build and push Gateway
        working-directory: ./micro-digiservices/gateway
        run: |
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=${{ steps.build-number.outputs.BUILD_NUMBER }} jib:build
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=latest jib:build

      - name: Build and push Authorization Server
        working-directory: ./micro-digiservices/authorizationserver
        run: |
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=${{ steps.build-number.outputs.BUILD_NUMBER }} jib:build
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=latest jib:build

      - name: Build and push User Service
        working-directory: ./micro-digiservices/userservice
        run: |
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=${{ steps.build-number.outputs.BUILD_NUMBER }} jib:build
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=latest jib:build

      - name: Build and push E-Credit Service
        working-directory: ./micro-digiservices
        run: |
          # Build clients module first as it's a dependency
          mvn -ntp -B install -DskipTests -pl clients
          # Now build ecreditservice
          cd ecreditservice
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=${{ steps.build-number.outputs.BUILD_NUMBER }} jib:build
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=latest jib:build

      - name: Build and push E-Banking Service
        working-directory: ./micro-digiservices/ebanking
        run: |
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=${{ steps.build-number.outputs.BUILD_NUMBER }} jib:build
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=latest jib:build

      - name: Build and push Notification Service
        working-directory: ./micro-digiservices/notificationservice
        run: |
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=${{ steps.build-number.outputs.BUILD_NUMBER }} jib:build
          mvn -ntp -B verify -DskipTests -Ddocker.image.tag=latest jib:build

      - name: Notify images pushed
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":":whale: All microservices images pushed to DockerHub!\nTag: ${{ steps.build-number.outputs.BUILD_NUMBER }}"}'
          ${{ secrets.SLACK_WEBHOOK_URL }}

      # Deploy to OVH server - Tout intégré ici
      - name: Deploy to OVH server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.OVH_HOST }}
          username: ${{ secrets.OVH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # Se déplacer dans le répertoire du projet
            cd ~/microservices || mkdir -p ~/microservices && cd ~/microservices
            
            # Cloner ou mettre à jour le repository
            if [ -d ".git" ]; then
              echo "📥 Pulling latest changes..."
              git pull origin main
            else
              echo "📥 Cloning repository..."
              git clone https://github.com/${{ github.repository }} .
              git checkout main
            fi
            
            # Créer les répertoires nécessaires
            echo "📁 Creating required directories..."
            mkdir -p logs/{discoveryserver,gateway,authorizationserver,userservice,ecreditservice,ebankingservice,notificationservice,frontend}
            mkdir -p keys
            
            # Vérifier que .env.prod existe
            if [ ! -f .env.prod ]; then
              echo "⚠️ Creating .env.prod from template..."
              cp .env.docker .env.prod || echo "No template found, please create .env.prod manually"
            fi
            
            # Créer le réseau Docker si nécessaire
            sudo docker network inspect spring >/dev/null 2>&1 || sudo docker network create spring
            
            # Arrêter tous les conteneurs existants
            echo "🛑 Stopping existing services..."
            sudo docker compose --env-file .env.prod down || true
            
            # Nettoyer
            echo "🧹 Cleaning up..."
            sudo docker system prune -f
            
            # Démarrer PostgreSQL et Kafka en premier
            echo "🏗️ Starting infrastructure services..."
            sudo docker compose --env-file .env.prod up -d postgresdb zookeeper kafka
            
            # Attendre que PostgreSQL soit prêt
            echo "⏳ Waiting for PostgreSQL..."
            count=0
            until sudo docker compose --env-file .env.prod exec -T postgresdb pg_isready -U user2711 || [ $count -eq 30 ]; do
              echo "Waiting for PostgreSQL... ($count/30)"
              sleep 2
              count=$((count + 1))
            done
            
            if [ $count -eq 30 ]; then
              echo "❌ PostgreSQL failed to start!"
              exit 1
            fi
            
            # Exécuter les migrations Flyway
            echo "🗄️ Running database migrations..."
            sudo docker compose --env-file .env.prod --profile migration up flyway-migrations || echo "Migrations completed or already applied"
            
            # Démarrer Discovery Server en premier
            echo "🔍 Starting Discovery Server..."
            sudo docker compose --env-file .env.prod up -d discoveryserver
            sleep 30
            
            # Démarrer Gateway et Authorization Server
            echo "🔐 Starting Gateway and Authorization Server..."
            sudo docker compose --env-file .env.prod up -d gateway authorizationserver
            sleep 20
            
            # Démarrer tous les autres microservices
            echo "🚀 Starting all microservices..."
            sudo docker compose --env-file .env.prod up -d
            
            # Attendre le démarrage complet
            echo "⏳ Waiting for all services to start..."
            sleep 60
            
            # Vérifier l'état des services
            echo "🏥 Checking services health..."
            services=("postgresdb" "kafka" "discoveryserver" "gateway" "authorizationserver" "userservice" "ecreditservice" "ebankingservice" "notificationservice")
            all_healthy=true
            
            for service in "${services[@]}"; do
              if sudo docker compose --env-file .env.prod ps | grep -q "$service.*Up"; then
                echo "✅ $service is running"
              else
                echo "❌ $service is not running"
                all_healthy=false
              fi
            done
            
            # Afficher les logs si problème
            if [ "$all_healthy" = false ]; then
              echo "⚠️ Some services failed. Recent logs:"
              sudo docker compose --env-file .env.prod logs --tail=100
              exit 1
            fi
            
            # Afficher les URLs d'accès
            echo ""
            echo "🌐 Deployment successful! Services available at:"
            echo "   • Gateway: http://${{ secrets.OVH_HOST }}:8000"
            echo "   • Discovery: http://${{ secrets.OVH_HOST }}:5002"
            echo "   • Auth Server: http://${{ secrets.OVH_HOST }}:8080"
            echo "   • Frontend: http://${{ secrets.OVH_HOST }}:4200"
            echo ""

      - name: Final success notification
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":":white_check_mark: Microservices deployment to OVH complete!\n:globe_with_meridians: Services:\n• Gateway: http://${{ secrets.OVH_HOST }}:8000\n• Discovery: http://${{ secrets.OVH_HOST }}:5002\n• Auth Server: http://${{ secrets.OVH_HOST }}:8080\n• Frontend: http://${{ secrets.OVH_HOST }}:4200\n:rocket: Build tag: ${{ steps.build-number.outputs.BUILD_NUMBER }}"}'
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Error notification
        if: failure()
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":":rotating_light: OVH microservices deployment failed!\n:stopwatch: Status: ${{ job.status }}\n:link: Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'
          ${{ secrets.SLACK_WEBHOOK_URL }}