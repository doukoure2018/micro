name: CD - Deploy Microservices to OVH

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - micro-digiservices/**
      - docker-compose.yml
      - .env.prod
      - '!micro-digiservices/frontend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_USER: user2711
          POSTGRES_PASSWORD: admin2711
          POSTGRES_DATABASE: localdb
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Notify deployment start
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":":rocket: Microservices deployment to OVH started\nCommit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}\nMessage: ${{ github.event.head_commit.message }}"}'
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
       # ADD THIS NEW STEP HERE
      - name: Configure Maven settings for Docker Hub
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>registry-1.docker.io</id>
                <username>${{ secrets.DOCKERHUB_USERNAME }}</username>
                <password>${{ secrets.DOCKERHUB_ACCESS_TOKEN }}</password>
              </server>
              <server>
                <id>registry.hub.docker.com</id>
                <username>${{ secrets.DOCKERHUB_USERNAME }}</username>
                  <password>${{ secrets.DOCKERHUB_ACCESS_TOKEN }}</password>
                </server>
              </servers>
          </settings>
          EOF

      - name: Generate build tag
        id: build-number
        run: echo "BUILD_NUMBER=$(date '+%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      # Build and push each microservice with Maven/Jib
      - name: Install all modules (including clients)
        working-directory: ./micro-digiservices
        run: mvn -ntp -B install -DskipTests

      - name: Build and push Discovery Server
        working-directory: ./micro-digiservices/discoveryserver
        run: |
          mvn -ntp -B verify -DskipTests jib:dockerBuild
          docker tag doukoure93/discoveryserver:0.0.1-SNAPSHOT doukoure93/discoveryserver:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker tag doukoure93/discoveryserver:0.0.1-SNAPSHOT doukoure93/discoveryserver:latest
          docker push doukoure93/discoveryserver:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker push doukoure93/discoveryserver:latest

      - name: Build and push Gateway
        working-directory: ./micro-digiservices/gateway
        run: |
          mvn -ntp -B verify -DskipTests jib:dockerBuild
          docker tag doukoure93/gateway:0.0.1-SNAPSHOT doukoure93/gateway:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker tag doukoure93/gateway:0.0.1-SNAPSHOT doukoure93/gateway:latest
          docker push doukoure93/gateway:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker push doukoure93/gateway:latest

      - name: Build and push Authorization Server
        working-directory: ./micro-digiservices/authorizationserver
        run: |
          mvn -ntp -B verify -DskipTests jib:dockerBuild
          docker tag doukoure93/authorizationserver:0.0.1-SNAPSHOT doukoure93/authorizationserver:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker tag doukoure93/authorizationserver:0.0.1-SNAPSHOT doukoure93/authorizationserver:latest
          docker push doukoure93/authorizationserver:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker push doukoure93/authorizationserver:latest

      - name: Build and push User Service
        working-directory: ./micro-digiservices/userservice
        run: |
          mvn -ntp -B verify -DskipTests jib:dockerBuild
          docker tag doukoure93/userservice:0.0.1-SNAPSHOT doukoure93/userservice:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker tag doukoure93/userservice:0.0.1-SNAPSHOT doukoure93/userservice:latest
          docker push doukoure93/userservice:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker push doukoure93/userservice:latest

      - name: Build and push E-Credit Service
        working-directory: ./micro-digiservices
        run: |
          mvn -ntp -B install -DskipTests -pl clients
          cd ecreditservice
          mvn -ntp -B verify -DskipTests jib:dockerBuild
          docker tag doukoure93/ecreditservice:0.0.1-SNAPSHOT doukoure93/ecreditservice:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker tag doukoure93/ecreditservice:0.0.1-SNAPSHOT doukoure93/ecreditservice:latest
          docker push doukoure93/ecreditservice:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker push doukoure93/ecreditservice:latest

      - name: Build and push E-Banking Service
        working-directory: ./micro-digiservices/ebanking
        run: |
          mvn -ntp -B verify -DskipTests jib:dockerBuild
          docker tag doukoure93/ebanking:0.0.1-SNAPSHOT doukoure93/ebanking:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker tag doukoure93/ebanking:0.0.1-SNAPSHOT doukoure93/ebanking:latest
          docker push doukoure93/ebanking:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker push doukoure93/ebanking:latest

      - name: Build and push Notification Service
        working-directory: ./micro-digiservices/notificationservice
        run: |
          mvn -ntp -B verify -DskipTests jib:dockerBuild
          docker tag doukoure93/notificationservice:0.0.1-SNAPSHOT doukoure93/notificationservice:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker tag doukoure93/notificationservice:0.0.1-SNAPSHOT doukoure93/notificationservice:latest
          docker push doukoure93/notificationservice:${{ steps.build-number.outputs.BUILD_NUMBER }}
          docker push doukoure93/notificationservice:latest
      

      - name: Notify images pushed
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":":whale: All microservices images pushed to DockerHub!\nTag: ${{ steps.build-number.outputs.BUILD_NUMBER }}"}'
          ${{ secrets.SLACK_WEBHOOK_URL }}

      # Deploy to OVH server - Version optimis√©e
      - name: Deploy to OVH server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.OVH_HOST }}
          username: ${{ secrets.OVH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e  # Stop on error

            # Navigate to project directory
            cd ~/microservices || { mkdir -p ~/microservices && cd ~/microservices; }

            # Sync repository
            if [ -d ".git" ]; then
              echo "üì• Syncing with repository..."
              git stash save "Auto-stash before deployment $(date)" || true
              git fetch origin main
              git reset --hard origin/main
              echo "‚úÖ Repository synchronized"
            else
              echo "üì• Cloning repository..."
              git clone https://github.com/${{ github.repository }} .
              git checkout main
            fi

            # Create required directories
            echo "üìÅ Creating required directories..."
            mkdir -p logs/{discoveryserver,gateway,authorizationserver,userservice,ecreditservice,ebankingservice,notificationservice,frontend}
            mkdir -p keys

            # Check .env.prod exists
            if [ ! -f .env.prod ]; then
              echo "‚ö†Ô∏è .env.prod not found, using .env.docker as template..."
              cp .env.docker .env.prod || { echo "‚ùå No .env.docker found!"; exit 1; }
            fi

            # Load environment variables
            export $(cat .env.prod | grep -v '^#' | xargs)

            # COMPLETE CLEANUP - This fixes the network issue
            echo "üõë Complete Docker cleanup..."
            sudo docker compose --env-file .env.prod down --volumes --remove-orphans || true

            echo "üßπ Removing all project containers..."
            sudo docker ps -aq | xargs -r sudo docker rm -f 2>/dev/null || true

            echo "üîß Removing and recreating network..."
            sudo docker network rm microservices_spring 2>/dev/null || true
            sudo docker network rm microservices_default 2>/dev/null || true

            # Pull latest images
            echo "üì• Pulling all latest images..."
            sudo docker compose --env-file .env.prod pull

            # Clean old images
            echo "üßπ Cleaning up old images..."
            sudo docker image prune -f

            # Start PostgreSQL and Kafka
            echo "üèóÔ∏è Starting infrastructure services..."
            sudo docker compose --env-file .env.prod up -d postgresdb zookeeper kafka

            # Wait for PostgreSQL
            echo "‚è≥ Waiting for PostgreSQL..."
            count=0
            until sudo docker exec postgrecontainer pg_isready -U ${POSTGRES_USER:-user2711} || [ $count -eq 30 ]; do
              echo "Waiting for PostgreSQL... ($count/30)"
              sleep 2
              count=$((count + 1))
            done

            if [ $count -eq 30 ]; then
              echo "‚ùå PostgreSQL failed to start!"
              exit 1
            fi
            echo "‚úÖ PostgreSQL is ready"

            # Run migrations
            echo "üóÑÔ∏è Running database migrations..."
            MIGRATION_COUNT=$(ls micro-digiservices/database-migrations/src/main/resources/db/migration/*.sql 2>/dev/null | wc -l)
            echo "üìã Found $MIGRATION_COUNT migration files"

            # Get the actual network name created by docker-compose
            NETWORK_NAME=$(sudo docker network ls --filter name=microservices --format "{{.Name}}" | head -1)

            if [ "$MIGRATION_COUNT" -gt 0 ]; then
              sudo docker run --rm \
                --network ${NETWORK_NAME:-bridge} \
                -v "$(pwd)/micro-digiservices/database-migrations/src/main/resources/db/migration:/flyway/sql:ro" \
                -e FLYWAY_URL="jdbc:postgresql://postgrecontainer:5432/${POSTGRES_DB:-localdb}" \
                -e FLYWAY_USER="${POSTGRES_USER:-user2711}" \
                -e FLYWAY_PASSWORD="${POSTGRES_PASSWORD:-admin2711}" \
                -e FLYWAY_BASELINE_ON_MIGRATE="true" \
                -e FLYWAY_OUT_OF_ORDER="true" \
                -e FLYWAY_VALIDATE_ON_MIGRATE="false" \
                flyway/flyway:11.3.0 migrate || echo "‚ö†Ô∏è Some migrations may have issues"
            fi

            # Start Discovery Server
            echo "üîç Starting Discovery Server..."
            sudo docker compose --env-file .env.prod up -d discoveryserver
            sleep 30

            # Start Gateway and Authorization Server
            echo "üîê Starting Gateway and Authorization Server..."
            sudo docker compose --env-file .env.prod up -d gateway authorizationserver
            sleep 20

            # Start all remaining services
            echo "üöÄ Starting all microservices..."
            sudo docker compose --env-file .env.prod up -d

            # Wait for services to start
            echo "‚è≥ Waiting for all services to start..."
            sleep 60

            # Check services health
            echo "üè• Checking services health..."
            services=("postgrecontainer" "kafka" "discoveryserver" "gateway" "authorizationserver" "userservice" "ecreditservice" "ebankingservice" "notificationservice")
            all_healthy=true

            for service in "${services[@]}"; do
              if sudo docker ps | grep -q "$service"; then
                echo "‚úÖ $service is running"
              else
                echo "‚ùå $service is not running"
                all_healthy=false
              fi
            done

            if [ "$all_healthy" = false ]; then
              echo "‚ö†Ô∏è Some services failed. Recent logs:"
              sudo docker compose --env-file .env.prod logs --tail=50
              exit 1
            fi

            echo ""
            echo "üåê Deployment successful!"
            echo "================================================"
            echo "Services available at:"
            echo "   ‚Ä¢ Frontend: https://digi-creditrural-io.com"
            echo "   ‚Ä¢ Gateway: http://${{ secrets.OVH_HOST }}:8000"
            echo "   ‚Ä¢ Auth Server: http://${{ secrets.OVH_HOST }}:8080"
            echo "================================================"

      - name: Final success notification
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":":white_check_mark: Microservices deployment to OVH complete!\n:globe_with_meridians: Services:\n‚Ä¢ Gateway: http://${{ secrets.OVH_HOST }}:8000\n‚Ä¢ Discovery: http://${{ secrets.OVH_HOST }}:5002\n‚Ä¢ Auth Server: http://${{ secrets.OVH_HOST }}:8080\n‚Ä¢ Frontend: http://${{ secrets.OVH_HOST }}:4200\n:rocket: Build tag: ${{ steps.build-number.outputs.BUILD_NUMBER }}"}'
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Error notification
        if: failure()
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":":rotating_light: OVH microservices deployment failed!\n:stopwatch: Status: ${{ job.status }}\n:link: Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'
          ${{ secrets.SLACK_WEBHOOK_URL }}