spring:
  application:
    name: notificationservice

  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    cache: false

  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          writetimeout: 5000
          connectiontimeout: 5000
          timeout: 5000
          auth: true
          starttls:
            enable: true
            required: true
    default-encoding: UTF-8

  cloud:
    discovery:
      client:
        composite-indicator:
          enabled: true

  datasource:
    url: jdbc:postgresql://postgresdb:5432/localdb
    username: ${DB_USERNAME:user2711}
    password: ${DB_PASSWORD:admin2711}
    hikari:
      connection-test-query: SELECT 1
      maximum-pool-size: 8
      minimum-idle: 2
      idle-timeout: 30000
      connection-timeout: 30000
      max-lifetime: 1800000

  main:
    allow-bean-definition-overriding: true

  jpa:
    database: POSTGRESQL
    open-in-view: false
    generate-ddl: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        default_schema: localdb

  kafka:
    bootstrap-servers:
      - kafka:9092
    template:
      default-topic: NOTIFICATION_TOPIC
    consumer:
      group-id: topicgroupid
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        fetch.message.max.bytes: 1300000000
        max.partition.fetch.bytes: 1300000000
        enable.auto.commit: false
        auto.offset.reset: earliest
        session.timeout.ms: 30000
        heartbeat.interval.ms: 10000
        spring.json.trusted.packages: "io.digiservices.notificationservice.domain,io.digiservices.userservice.domain"
    properties:
      spring:
        json:
          type:
            mapping: Notification:io.digiservices.notificationservice.domain.Notification
      fetch.message.max.bytes: 1300000000

eureka:
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
  client:
    service-url:
      defaultZone: http://admin:admin2711@discoveryserver:5002/eureka/
    register-with-eureka: true
    fetch-registry: true

ui:
  app:
    url: ${UI_APP_URL:http://localhost:4200}

verify:
  email:
    host: ${UI_APP_URL:http://localhost:4200}

key:
  private: "/app/keys/private.key"
  public: "/app/keys/public.key"

server:
  port: 8086
  tomcat:
    max-threads: 50
    min-spare-threads: 5
    max-connections: 2000
    accept-count: 50

jwks:
  uri: http://authorizationserver:8080/oauth2/jwks

logging:
  level:
    root: INFO
    io.digiservices: DEBUG
    org.springframework: INFO
    org.hibernate: INFO
    com.netflix.discovery: INFO
    org.springframework.kafka: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true