spring:
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    cache: true  # Enable cache in production
  application:
    name: authorizationserver
  cloud:
    discovery:
      client:
        composite-indicator:
          enabled: true

  datasource:
    url: jdbc:postgresql://postgresdb:5432/localdb
    username: user2711
    password: admin2711
    hikari:
      connection-test-query: SELECT 1
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 30000
      connection-timeout: 30000
      max-lifetime: 1800000  # 30 minutes
      leak-detection-threshold: 60000

  main:
    allow-bean-definition-overriding: true

  jpa:
    database: POSTGRESQL
    open-in-view: false
    generate-ddl: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false  # Disable SQL logging in production
    hibernate:
      ddl-auto: validate  # Use validate in production to prevent schema changes
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.PostgreSQLDialect
        default_schema: localdb
        # Performance optimization
        jdbc.batch_size: 30
        order_inserts: true
        order_updates: true
        connection.provider_disables_autocommit: true

eureka:
  instance:
    prefer-ip-address: true
    hostname: authorizationserver
    ip-address: 51.91.254.218
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
  client:
    service-url:
      defaultZone: http://admin:admin2711@discoveryserver:5002/eureka/
    register-with-eureka: true
    fetch-registry: true
    eureka-server-connect-timeout-seconds: 30
    eureka-server-read-timeout-seconds: 30

# Application URLs configuration
ui:
  app:
    url: ${UI_APP_URL:https://digi-creditrural-io.com}

backend:
  app:
    url: ${BACKEND_APP_URL:http://51.91.254.218:8080}

# OAuth2 configuration
oauth2:
  authorization:
    base-url: ${BACKEND_APP_URL:http://51.91.254.218:8080}
    client-id: ${OAUTH2_CLIENT_ID:client}
    scope: ${OAUTH2_SCOPE:openid}
    response-type: ${OAUTH2_RESPONSE_TYPE:code}
    code-challenge-method: ${OAUTH2_CODE_CHALLENGE_METHOD:S256}
    redirect-uri: ${UI_APP_URL:http://51.91.254.218:4200}

key:
  private: "/app/keys/private.key"
  public: "/app/keys/public.key"

server:
  port: 8080
  tomcat:
    max-threads: 200
    min-spare-threads: 20
    max-connections: 10000
    accept-count: 100
    connection-timeout: 20000
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 2048
  # Security headers
  servlet:
    session:
      timeout: 30m
      cookie:
        secure: true
        http-only: true
        same-site: lax

# Logging configuration for production
logging:
  level:
    root: INFO
    io.digiservices: INFO
    org.springframework: WARN
    org.hibernate: WARN
    com.netflix.discovery: INFO
  file:
    name: /var/log/authorizationserver/application.log
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 30
      total-size-cap: 3GB

# Actuator settings
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when_authorized
      probes:
        enabled: true
    info:
      enabled: true
    metrics:
      enabled: true
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  info:
    env:
      enabled: true
    build:
      enabled: true
    git:
      enabled: true

# Security configuration
security:
  oauth2:
    authorization-server:
      # Production security settings
      token:
        access-token-time-to-live: PT15M  # 15 minutes
        refresh-token-time-to-live: P30D  # 30 days
      # Rate limiting (if implemented)
      rate-limit:
        enabled: true
        requests-per-minute: 100

# Cache configuration (if using caching)
cache:
  caffeine:
    spec: maximumSize=1000,expireAfterWrite=300s
